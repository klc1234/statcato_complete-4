/*
 * HyTest2PopPropDialog.java
 *
 * Created on June 6, 2008, 4:03 PM
 */

package org.statcato.dialogs.stat.hytest;

import org.statcato.*;
import org.statcato.spreadsheet.*;
import org.statcato.statistics.inferential.*;
import org.statcato.utils.HelperFunctions;
import java.util.*;
import javax.swing.*;

/**
 * A dialog for claims about the difference of two population proportions.
 * Allows the user to specify data samples in columns of a Datasheet,
 * or provide summary data values.  The user must also provide
 * the confidence level, alternative hypothesis, hypothesized 
 * mean proportion, and
 * whether the pooled estimate is used.
 * Computes and displays in log window the significance level, 
 * critical value, test statistic, and p-Value.
 * 
 * @author  Margaret Yau
 * @version %I%, %G%
 * @see org.statcato.statistics.inferential.HypothesisTest2Prop
 * @since 1.0
 */
public class HyTest2PopPropDialog extends StatcatoDialog {

    /** Creates new form HyTest2PopPropDialog */
    public HyTest2PopPropDialog(java.awt.Frame parent, boolean modal,
            Statcato mTab) {
        super(parent, modal);
        initComponents();
        
        app = mTab;
        ParentSpreadsheet = app.getSpreadsheet(); 
        
        ButtonGroup group1 = new ButtonGroup();
        group1.add(Sample1ColRadioButton);
        group1.add(Sample2ColRadioButton);
        group1.add(SummaryRadioButton);
        
        ButtonGroup group4 = new ButtonGroup();
        group4.add(SigRadioButton);
        group4.add(ConfRadioButton);
        
        ParentSpreadsheet.populateComboBox(LabelsComboBox);
        ParentSpreadsheet.populateComboBox(ValuesComboBox);
        ParentSpreadsheet.populateComboBox(Pop1ComboBox);
        ParentSpreadsheet.populateComboBox(Pop2ComboBox);
        
        getRootPane().setDefaultButton(OKButton);
        setHelpFile("stat-hytest-2prop");
        name = "Hypothesis Test: 2-Population Proportions";
        description = "For performing calculations for testing claims about " +
                "the difference of two population proportions.";
        helpStrings.add("The sample data of the population must be of only " +
                " categories. They can be provided in one of three ways...");
        helpStrings.add("Samples in one column: The population labels of " +
                "samples are in one column of the datasheet, and the " +
                "individual samples are in another column.");
        helpStrings.add("Samples in two columns: The samples of the " +
                "two population are in two separate columns.");
        helpStrings.add("Summarized sample data: The number of events " +
                "and the number of trials of each of the two populations " +
                "are provided.");
        helpStrings.add("Specify the significance or confidence level.");
        helpStrings.add("Specify the form of the alternative hypotheis and " +
                "the hypothesized proportion difference.");
        helpStrings.add("Select the Use pooled estimate check box " +
                "if the pooled estimate is appropriate for combining the samples.");
    }

    /**
     * Updates elements on the dialog so that they have the most
     * current values.  Called by {@link #setVisible} to make
     * sure the dialog displays current values when made visible again.
     * 
     * @see #setVisible(boolean)
     */
    @Override
    public void updateElements() {
        updateComboBox(LabelsComboBox);
        updateComboBox(ValuesComboBox);
        updateComboBox(Pop1ComboBox);
        updateComboBox(Pop2ComboBox);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        OKButton = new javax.swing.JButton();
        CancelButton = new javax.swing.JButton();
        PoolCheckBox = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        Events2TextField = new javax.swing.JTextField();
        ValuesComboBox = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Trials2TextField = new javax.swing.JTextField();
        Sample2ColRadioButton = new javax.swing.JRadioButton();
        Trials1TextField = new javax.swing.JTextField();
        Pop1ComboBox = new javax.swing.JComboBox();
        Sample1ColRadioButton = new javax.swing.JRadioButton();
        Pop2ComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        LabelsComboBox = new javax.swing.JComboBox();
        SummaryRadioButton = new javax.swing.JRadioButton();
        Events1TextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        HyTextField = new javax.swing.JTextField();
        AltComboBox = new javax.swing.JComboBox();
        SigPanel = new javax.swing.JPanel();
        SigLabel = new javax.swing.JLabel();
        ConfidenceTextField = new javax.swing.JTextField();
        ConfRadioButton = new javax.swing.JRadioButton();
        SigRadioButton = new javax.swing.JRadioButton();
        SigTextField = new javax.swing.JTextField();
        ConfLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Hypothesis Test: 2-Population Proportions");

        OKButton.setText("OK");
        OKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKButtonActionPerformed(evt);
            }
        });

        CancelButton.setText("Cancel");
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        PoolCheckBox.setText("Use pooled estimate");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Inputs"));

        Events2TextField.setEnabled(false);

        jLabel5.setText("Population 1:");

        jLabel1.setText("Labels in column:");

        jLabel3.setText("Population 1:");

        Trials2TextField.setEnabled(false);

        Sample2ColRadioButton.setText("Samples in two columns");
        Sample2ColRadioButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                Sample2ColRadioButtonStateChanged(evt);
            }
        });

        Trials1TextField.setEnabled(false);

        Pop1ComboBox.setEnabled(false);

        Sample1ColRadioButton.setSelected(true);
        Sample1ColRadioButton.setText("Samples in one column");
        Sample1ColRadioButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                Sample1ColRadioButtonStateChanged(evt);
            }
        });

        Pop2ComboBox.setEnabled(false);

        jLabel2.setText("Values in column:");

        jLabel7.setText("Events");

        jLabel4.setText("Population 2:");

        jLabel8.setText("Trials");

        SummaryRadioButton.setText("Summarized sample data");
        SummaryRadioButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                SummaryRadioButtonStateChanged(evt);
            }
        });

        Events1TextField.setEnabled(false);

        jLabel6.setText("Population 2:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Sample1ColRadioButton)
                    .addComponent(Sample2ColRadioButton)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(ValuesComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(LabelsComboBox, 0, 94, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3))
                                .addGap(26, 26, 26)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(Pop2ComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Pop1ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel5))
                                .addGap(35, 35, 35)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(Events1TextField, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(Events2TextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel8)
                                    .addComponent(Trials1TextField, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                                    .addComponent(Trials2TextField)))))
                    .addComponent(SummaryRadioButton))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Sample1ColRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(LabelsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ValuesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addComponent(Sample2ColRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(Pop1ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Pop2ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(SummaryRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(Events1TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Trials1TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(Events2TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Trials2TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Alternative Hypothesis"));

        jLabel11.setText("Alternative Hypothesis:");

        jLabel12.setText("Hypothesized Proportion Difference:");

        HyTextField.setText("0");

        AltComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Less than", "Not Equal to", "Greater than" }));
        AltComboBox.setSelectedIndex(1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AltComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(HyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(AltComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(HyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        SigPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Significance"));

        SigLabel.setText("0 - 1.00 (e.g. 0.05)");

        ConfidenceTextField.setText("0.95");
        ConfidenceTextField.setEnabled(false);
        ConfidenceTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ConfidenceTextFieldFocusLost(evt);
            }
        });

        ConfRadioButton.setText("Confidence Level:");
        ConfRadioButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ConfRadioButtonStateChanged(evt);
            }
        });

        SigRadioButton.setSelected(true);
        SigRadioButton.setText("Significance Level:");
        SigRadioButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                SigRadioButtonStateChanged(evt);
            }
        });

        SigTextField.setText("0.05");
        SigTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                SigTextFieldFocusLost(evt);
            }
        });

        ConfLabel.setText("0 - 1.00 (e.g. 0.95)");
        ConfLabel.setEnabled(false);

        javax.swing.GroupLayout SigPanelLayout = new javax.swing.GroupLayout(SigPanel);
        SigPanel.setLayout(SigPanelLayout);
        SigPanelLayout.setHorizontalGroup(
            SigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SigPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ConfRadioButton)
                    .addComponent(SigRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(SigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ConfidenceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SigTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(SigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SigLabel)
                    .addComponent(ConfLabel))
                .addGap(37, 37, 37))
        );
        SigPanelLayout.setVerticalGroup(
            SigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SigPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(SigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SigRadioButton)
                    .addComponent(SigTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SigLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(SigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConfRadioButton)
                    .addComponent(ConfidenceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ConfLabel))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(SigPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                            .addComponent(PoolCheckBox)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(266, 266, 266)
                        .addComponent(OKButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CancelButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {CancelButton, OKButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(SigPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PoolCheckBox))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(88, 88, 88)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OKButton)
                    .addComponent(CancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SummaryRadioButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SummaryRadioButtonStateChanged
        if (SummaryRadioButton.isSelected()) {
            Events1TextField.setEnabled(true);
            Events2TextField.setEnabled(true);
            Trials1TextField.setEnabled(true);
            Trials2TextField.setEnabled(true);
        } else {
            Events1TextField.setEnabled(false);
            Events2TextField.setEnabled(false);
            Trials1TextField.setEnabled(false);
            Trials2TextField.setEnabled(false);
        }
    }//GEN-LAST:event_SummaryRadioButtonStateChanged

    private void Sample1ColRadioButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_Sample1ColRadioButtonStateChanged
        if (Sample1ColRadioButton.isSelected()) {
            LabelsComboBox.setEnabled(true);
            ValuesComboBox.setEnabled(true);
        } else {
            LabelsComboBox.setEnabled(false);
            ValuesComboBox.setEnabled(false);
        }
    }//GEN-LAST:event_Sample1ColRadioButtonStateChanged

    private void Sample2ColRadioButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_Sample2ColRadioButtonStateChanged
        if (Sample2ColRadioButton.isSelected()) {
            Pop1ComboBox.setEnabled(true);
            Pop2ComboBox.setEnabled(true);
        } else {
            Pop1ComboBox.setEnabled(false);
            Pop2ComboBox.setEnabled(false);
        }
    }//GEN-LAST:event_Sample2ColRadioButtonStateChanged

    @SuppressWarnings("unchecked") 
    private void OKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKButtonActionPerformed
        app.compoundEdit = new DialogEdit("hypothesis test 2 proportion");
        
        int trials1 = 0, trials2 = 0;   // number of trials
        int events1 = 0, events2 = 0;   // number of events
        double confidenceLevel;
        
        String heading = "Hypothesis Test - Two population proportions:";
        String text = "";
        
        if (ConfRadioButton.isSelected()) {
            // get confidence level from dialog
            try {
                confidenceLevel = Double.parseDouble(ConfidenceTextField.getText());
            } catch (NumberFormatException e) {
                app.showErrorDialog("Enter a number between 0 and 1 for the confidence level.");
                return;
            }
            if (confidenceLevel <= 0 || confidenceLevel >= 1) {
                app.showErrorDialog("Enter a number between 0 and 1 for the confidence level.");
                return;
            }
        }
        else {
            // get confidence level from dialog
            try {
                confidenceLevel = 1 - Double.parseDouble(SigTextField.getText());
            } catch (NumberFormatException e) {
                app.showErrorDialog("Enter a number between 0 and 1 for the significance level.");
                return;
            }
            if (confidenceLevel <= 0 || confidenceLevel >= 1) {
                app.showErrorDialog("Enter a number between 0 and 1 for the significance level.");
                return;
            }
        }
        
        heading += "  confidence level = " + 
                String.format("%."+
                HelperFunctions.getNumDecimalPlaces(ConfidenceTextField.getText())+"f", 
                confidenceLevel);
        
        // summary values
        if (SummaryRadioButton.isSelected()) {
            try {
                events1 = Integer.parseInt(Events1TextField.getText());
                events2 = Integer.parseInt(Events2TextField.getText());
            } catch (NumberFormatException e) {
                app.showErrorDialog("Enter an integer for the number of events.");
                return;
            }
            try {
                trials1 = Integer.parseInt(Trials1TextField.getText());
                trials2 = Integer.parseInt(Trials2TextField.getText());
            } catch (NumberFormatException e) {
                app.showErrorDialog("Enter an integer for the number of trials.");
                return;
            }
            if (events1 > trials1 || events2 > trials2) {
                app.showErrorDialog("The number of events cannot be greater" +
                        " than the number of trials.");
                return;
            }
        } else {
            Vector<Cell> Vector1 = null, Vector2 = null;
            
            // sample values in one column, labels in another
            if (Sample1ColRadioButton.isSelected()) {
                // get data for the labels column
                String columnLabel = LabelsComboBox.getSelectedItem().toString();
                text += "Population labels in " + columnLabel + "<br>";
                if (columnLabel.equals("")) { // no labels column
                    app.showErrorDialog("Select the column containing category labels.");
                    return;
                }
                int column = ParentSpreadsheet.parseColumnNumber(columnLabel);
                Vector<Cell> LabelsVector = ParentSpreadsheet.getColumn(column);
                
                //get data for the sample values column
                columnLabel = ValuesComboBox.getSelectedItem().toString();
                text += "Samples values in " + columnLabel + "<br>";
                if (columnLabel.equals("")) {   // no values column
                    app.showErrorDialog("Select the column containing sample values.");
                    return;
                }
                column = ParentSpreadsheet.parseColumnNumber(columnLabel);
                Vector<Cell> ValuesVector = ParentSpreadsheet.getColumn(column);
                
                // split values into two vectors corresponding to the two categories
                try {
                    Object returnValues[] =
                            HelperFunctions.splitValuesVectorByLabels(LabelsVector, ValuesVector);
                    HelperFunctions.printVector((Vector)returnValues[1]);
                    HelperFunctions.printVector((Vector)returnValues[3]);
                    
                    text += "Population 1 = " + returnValues[0] + "<br>";
                    text += "Population 2 = " + returnValues[2] + "<br>";
                    
                    Vector1 = (Vector<Cell>) returnValues[1];
                    Vector2 = (Vector<Cell>) returnValues[3];
                } catch (Exception e) {
                    app.showErrorDialog(e.getMessage());
                    return;
                }
            }
            // sample values of two populations in separate columns
            else if (Sample2ColRadioButton.isSelected()) {
                //get data for the two columns of sample values
                String columnLabel = Pop1ComboBox.getSelectedItem().toString();
                text += "Samples of population 1 in " + columnLabel + "<br>";
                if (columnLabel.equals("")) {   // no values column
                    app.showErrorDialog("Select the column containing sample " +
                            "values for the first population.");
                    return;
                }
                int column = ParentSpreadsheet.parseColumnNumber(columnLabel);
                Vector1 = ParentSpreadsheet.getColumn(column);
                columnLabel = Pop2ComboBox.getSelectedItem().toString();
                text += "Samples of population 2 in " + columnLabel + "<br>";
                if (columnLabel.equals("")) {   // no values column
                    app.showErrorDialog("Select the column containing sample " +
                            "values for the second population.");
                    return;
                }
                column = ParentSpreadsheet.parseColumnNumber(columnLabel);
                Vector2 = ParentSpreadsheet.getColumn(column);
            }
            
            // split values vector for each population into two
            // for each of the two categories
            try {
                Object Values1[] =
                        HelperFunctions.splitValuesVector(Vector1);
                String cat11 = (String)Values1[0];
                String cat12 = (String)Values1[2];
                Vector<Cell> vector11 = (Vector<Cell>) Values1[1];
                Vector<Cell> vector12 = (Vector<Cell>) Values1[3];
                Object Values2[] =
                        HelperFunctions.splitValuesVector(Vector2);
                String cat21 = (String)Values2[0];
                String cat22 = (String)Values2[2];
                Vector<Cell> vector21 = (Vector<Cell>) Values2[1];
                Vector<Cell> vector22 = (Vector<Cell>) Values2[3];
                
                // check that the two categories in the two populations are
                // the same
                if (cat11.equals(cat21) && cat12.equals(cat22)) {
                    text += "Event = " + cat11;
                    events1 = vector11.size();
                    trials1 = vector11.size() + vector12.size();
                    events2 = vector21.size();
                    trials2 = vector21.size() + vector22.size();
                } else if (cat11.equals(cat22) && cat12.equals(cat21)) {
                    text += "Event = " + cat11;
                    events1 = vector11.size();
                    trials1 = vector11.size() + vector12.size();
                    events2 = vector22.size();
                    trials2 = vector21.size() + vector22.size();
                } else {
                    app.showErrorDialog("The two categories in the two " +
                            "population samples are not the same.");
                    return;
                }
            } catch (Exception e) {
                app.showErrorDialog(e.getMessage());
                return;
            }
        }
        
        double hyDiff;
        
        // get hypothesized difference
        try {
            hyDiff = Double.parseDouble(HyTextField.getText());
            if (hyDiff > 1 || hyDiff < -1) {
                app.showErrorDialog("Hypothesized difference must be " +
                        "between -1 and 1.");
                return;
            }
        }
        catch (NumberFormatException e) {
            app.showErrorDialog("Enter a valid number for the hypothesized " +
                    "proportion difference.");
            return;
        }
        // get type of test
        int typeTest = AltComboBox.getSelectedIndex();
        
        double p1 = (double)events1 / trials1;
        double p2 = (double)events2 / trials2;
    
        text += "<br><br><table border='1'>";
        text += "<tr><td>&nbsp;</td><td>Number of Events</td><td>Number of trials</td>" +
                "<td>Proportion</td></tr>";
        text += "<tr><td>Sample 1</td><td>" + events1 + "</td><td>" + trials1 +
                "</td><td>" + HelperFunctions.formatFloat(p1, 3) + "</td></tr>";
        text += "<tr><td>Sample 2</td><td>" + events2 + "</td><td>" + trials2 +
                "</td><td>" + HelperFunctions.formatFloat(p2, 3) + "</td></tr>"
                + "</table><br><br>";

        text += "Null hypothesis: p<sub>1</sub> - p<sub>2</sub> = " + 
                hyDiff + "<br>";
        text += "Alternative hypothesis: p<sub>1</sub> - p<sub>2</sub> ";
        if (typeTest == HypothesisTest.LEFT_TAIL)
            text += "&lt;";
        else if (typeTest == HypothesisTest.RIGHT_TAIL)
            text += "&gt;";
        else
            text += "&ne;";
        text += hyDiff + " <br>";

        HypothesisTest2Prop ht = new HypothesisTest2Prop(trials1, trials2,
                events1, events2, hyDiff, confidenceLevel, typeTest, 
                PoolCheckBox.isSelected());
        
        text += "<br><table border='1'>";
        text += "<tr><td>Significance Level</td></td><td>Critical Value</td>" +
                "<td>Test Statistic Z</td>" + "<td>p-Value</td></tr>";
        text += "<tr><td>" + 
                HelperFunctions.formatFloat(1-confidenceLevel, 2)  +
                "</td><td>" + ht.criticalValue()
                + "</td><td>" + HelperFunctions.formatFloat(ht.testStatistics(), 3)
                + "</td><td>" + HelperFunctions.formatFloat(ht.pValue(), 4)
                + "</td></tr></table>";        
        
        if (events1 < 5 || events2 < 5 || (trials1 - events1) < 5 || 
                (trials2 - events2) < 5) {
            text += "<br>* WARNING: The sample sizes are too small for normal " +
                    "approximation to be valid. *<br>";
        }
        
        app.addLogParagraph(heading, text);

        app.compoundEdit.end();
        app.addCompoundEdit(app.compoundEdit);
        
        setVisible(false);
    }//GEN-LAST:event_OKButtonActionPerformed

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
        setVisible(false);
    }//GEN-LAST:event_CancelButtonActionPerformed

    private void ConfidenceTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ConfidenceTextFieldFocusLost
        try {
            String confString = ConfidenceTextField.getText();
            double conf = Double.parseDouble(confString);
            double sig = 1.0 - conf;
            SigTextField.setText(
                    String.format("%."+HelperFunctions.getNumDecimalPlaces(confString)+"f", sig));
        } catch (NumberFormatException e) {
        }
    }//GEN-LAST:event_ConfidenceTextFieldFocusLost

    private void ConfRadioButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ConfRadioButtonStateChanged
        if (ConfRadioButton.isSelected()) {
            ConfidenceTextField.setEnabled(true);
            ConfLabel.setEnabled(true);
        } else {
            ConfidenceTextField.setEnabled(false);
            ConfLabel.setEnabled(false);
        }
    }//GEN-LAST:event_ConfRadioButtonStateChanged

    private void SigRadioButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SigRadioButtonStateChanged
        if (SigRadioButton.isSelected()) {
            SigTextField.setEnabled(true);
            SigLabel.setEnabled(true);
        } else {
            SigTextField.setEnabled(false);
            SigLabel.setEnabled(false);
        }
    }//GEN-LAST:event_SigRadioButtonStateChanged

    private void SigTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SigTextFieldFocusLost
        try {
            String sigString = SigTextField.getText();
            double sig = Double.parseDouble(sigString);
            double conf = 1 - sig;
            ConfidenceTextField.setText(
                    String.format("%."+HelperFunctions.getNumDecimalPlaces(sigString)+"f", conf));
        } catch (NumberFormatException e) {
        }
    }//GEN-LAST:event_SigTextFieldFocusLost
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox AltComboBox;
    private javax.swing.JButton CancelButton;
    private javax.swing.JLabel ConfLabel;
    private javax.swing.JRadioButton ConfRadioButton;
    private javax.swing.JTextField ConfidenceTextField;
    private javax.swing.JTextField Events1TextField;
    private javax.swing.JTextField Events2TextField;
    private javax.swing.JTextField HyTextField;
    private javax.swing.JComboBox LabelsComboBox;
    private javax.swing.JButton OKButton;
    private javax.swing.JCheckBox PoolCheckBox;
    private javax.swing.JComboBox Pop1ComboBox;
    private javax.swing.JComboBox Pop2ComboBox;
    private javax.swing.JRadioButton Sample1ColRadioButton;
    private javax.swing.JRadioButton Sample2ColRadioButton;
    private javax.swing.JLabel SigLabel;
    private javax.swing.JPanel SigPanel;
    private javax.swing.JRadioButton SigRadioButton;
    private javax.swing.JTextField SigTextField;
    private javax.swing.JRadioButton SummaryRadioButton;
    private javax.swing.JTextField Trials1TextField;
    private javax.swing.JTextField Trials2TextField;
    private javax.swing.JComboBox ValuesComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
    
}
